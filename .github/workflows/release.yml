name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  version:
    name: Determine version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.getver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read version from Cargo.toml
        id: getver
        run: |
          set -euo pipefail
          VER=$(sed -n 's/^version\s*=\s*"\([^"]*\)"/\1/p' Cargo.toml | head -n1)
          if [ -z "$VER" ]; then
            echo "Failed to parse version from Cargo.toml" >&2
            exit 1
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"
          echo "Version: $VER"

  build:
    name: Build and package (${{ matrix.os }} ${{ matrix.platform_label }})
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform_label: linux-x86_64
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform_label: linux-arm64
            use_cross: true
          - os: macos-14
            target: native
            platform_label: darwin-arm64
            use_cross: false
          - os: windows-latest
            target: native
            platform_label: windows-x86_64
            use_cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Set up QEMU (for cross)
        if: matrix.os == 'ubuntu-latest' && matrix.use_cross == true
        uses: docker/setup-qemu-action@v3
      - name: Install cross
        if: matrix.os == 'ubuntu-latest' && matrix.use_cross == true
        run: cargo install cross --locked
      - name: Install musl for native linux build
        if: matrix.os == 'ubuntu-latest' && matrix.use_cross == false
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          rustup target add ${{ matrix.target }}
      - name: Build release
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.use_cross }}" = "true" ]; then
              cross build --release --target ${{ matrix.target }}
            else
              cargo build --release --target ${{ matrix.target }}
            fi
          else
            cargo build --release
          fi
      - name: Verify binary version
        shell: bash
        run: |
          set -euo pipefail
          VERSION='${{ needs.version.outputs.version }}'
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            BIN="target/${{ matrix.target }}/release/fauxmail"
          else
            BIN="target/release/fauxmail"
          fi
          EXE="$BIN"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXE="${BIN}.exe"
          fi
          OUT=$("$EXE" --version | tr -d '\r')
          echo "Binary reports: $OUT"
          test "$OUT" = "fauxmail $VERSION" || { echo "Version mismatch" >&2; exit 1; }
      - name: Package archive
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          VERSION='${{ needs.version.outputs.version }}'
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            BIN="target/x86_64-unknown-linux-musl/release/fauxmail"
          else
            BIN="target/release/fauxmail"
          fi
          EXE="$BIN"
          # Windows binary extension
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXE="${BIN}.exe"
          fi
          if [[ ! -f "$EXE" ]]; then
            echo "Binary not found: $EXE" >&2
            ls -la target/release || true
            exit 1
          fi
          NAME="fauxmail-v${VERSION}-${{ matrix.platform_label }}"
          STAGE="$NAME"
          mkdir -p "$STAGE"
          cp "$EXE" "$STAGE/"
          # Include README for convenience
          [ -f README.md ] && cp README.md "$STAGE/"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Create zip on Windows for better UX
            powershell -NoLogo -NoProfile -Command "Compress-Archive -Path \"$STAGE/*\" -DestinationPath \"${NAME}.zip\" -Force"
            echo "asset=${NAME}.zip" >> "$GITHUB_OUTPUT"
          else
            tar czf "${NAME}.tar.gz" "$STAGE"
            echo "asset=${NAME}.tar.gz" >> "$GITHUB_OUTPUT"
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkg.outputs.asset }}
          path: ${{ steps.pkg.outputs.asset }}

  release:
    name: Create GitHub Release
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Generate checksums
        run: |
          cd dist
          set -euo pipefail
          if command -v sha256sum >/dev/null 2>&1; then
            find . -type f \( -name 'fauxmail-*.tar.gz' -o -name 'fauxmail-*.zip' \) -print0 | xargs -0 sha256sum > SHA256SUMS.txt
          else
            find . -type f \( -name 'fauxmail-*.tar.gz' -o -name 'fauxmail-*.zip' \) -print0 | xargs -0 shasum -a 256 > SHA256SUMS.txt
          fi
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: fauxmail v${{ needs.version.outputs.version }}
          body: |
            Automated release for fauxmail v${{ needs.version.outputs.version }}.

            Binaries for:
            - macOS (Apple Silicon)
            - Linux x86_64 (static musl)
            - Linux arm64 (static musl)
            - Windows x86_64
          files: |
            dist/**/fauxmail-*.tar.gz
            dist/**/fauxmail-*.zip
            dist/SHA256SUMS.txt
